#!/bin/bash

# determine absolute path of the executable
execDir=${BASH_SOURCE[0]}
execDirCheck=$(readlink ${execDir})

# check the context and set appropriately
if [ -z ${execDirCheck} ]; then
  k0sdir=$(pwd)
else
  k0sdir=$(dirname ${execDirCheck})
fi

# paths setup and discovery
workernodes=${1}
nginxdir=${k0sdir}/nginx
nginxconf=${nginxdir}/default.conf
node=1
t_out=5
ssl_name=k0s-local
RED='\033[0;31m'
NC='\033[0m' # No Color

printf "workernodes: ${workernodes}\nk0sdir: ${k0sdir}\nnginxdir: ${nginxdir}\nnginxconf: ${nginxconf}\nnode: ${node}\nt_out: ${t_out}\n"

printf "${RED}--checking for helm...${NC}\n"
if ! command -v helm &> /dev/null
then
  printf "${RED}--helm3 is not installed or found in ${PATH}, exiting...\n"
  exit
fi

printf "${RED}--checking for openssl...${NC}\n"
if ! command -v openssl &> /dev/null
then
  printf "${RED}--openssl is not installed or found in ${PATH}, exiting...${NC}\n"
  exit
fi

printf "${RED}--starting our controller node...${NC}\n"
docker run -d --name k0s-controller-1 --hostname k0s-controller-1 -v ${k0sdir}:/k0s --privileged -p 6443:6443 -v /var/lib/k0s k0sproject/k0s k0s controller -c /k0s/controller/controller.yaml

printf "${RED}--allowing controller to warm up for ${t_out} seconds...${NC}\n"
sleep ${t_out}

printf "${RED}--getting worker token...${NC}\n"
token=$(docker exec -it k0s-controller-1 k0s token create --role=worker)

printf "${RED}--generating an SSL certificate...${NC}\n"
${k0sdir}/gen_ssl.sh ${ssl_name}

echo 'upstream workers {' > ${nginxconf}

while [ ${node} -le ${workernodes} ]
do
  printf "${RED}--starting worker ${node}...${NC}\n"
  docker run -d --name k0s-worker-${node} --hostname k0s-worker-${node} --expose 80 --expose 443 --expose 10254 --privileged -v /var/lib/k0s k0sproject/k0s k0s worker ${token}
  echo -e "  server "$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' k0s-worker-${node})";" >> ${nginxconf}
  printf "${RED}--letting worker ${node} warm up and join the cluster...${NC}\n"
  sleep ${t_out}
  let node++
done

printf "${RED}--finish up the nginx config...${NC}\n"
cat >> ${nginxconf} << EOL
}

server {
  listen 80;
  server_name *.k0s.local;
  location / {
    proxy_set_header Host \$host;
    proxy_pass http://workers;
  }
}
EOL

printf "${RED}--starting up external nginx load balancer to the worker nodes...${NC}\n"
docker run -p 80:80 -v ${nginxdir}:/etc/nginx/conf.d --name k0s-ext-lb -d nginx


config=$(docker exec k0s-controller-1 cat /var/lib/k0s/pki/admin.conf)

printf "${RED}--snarfing up kubecfg and placing in .kube...${NC}\n"

if [ ! -d ~/.kube ]; then
  mkdir ~/.kube
fi

echo "${config}" > ~/.kube/config
chmod 600 ~/.kube/config

printf "${RED}--[helm] installing bitnami repository...${NC}\n"
helm repo add bitnami https://charts.bitnami.com/bitnami &> /dev/null

printf "${RED}--[helm] insalling nginx-ingress from bitnami...${NC}\n"
helm install nginx-ingress bitnami/nginx-ingress-controller --values ${k0sdir}/charts/nginx-ingress.yaml &> /dev/null
